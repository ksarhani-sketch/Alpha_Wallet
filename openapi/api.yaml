openapi: 3.0.3
info:
  title: Codex Finance API
  version: 0.2.0
servers:
  - url: https://{host}/v1
    variables:
      host:
        default: api.example.com
components:
  securitySchemes:
    CognitoUserPool:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
        details:
          nullable: true
    Account:
      type: object
      properties:
        accountId:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [cash, bank, card, crypto]
        currency:
          type: string
        openingBalance:
          type: number
        currentBalance:
          type: number
        archived:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [accountId, name, type, currency, openingBalance, currentBalance]
    Category:
      type: object
      properties:
        categoryId:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [expense, income]
        color:
          type: string
        icon:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [categoryId, name, type]
    Transaction:
      type: object
      properties:
        txnId:
          type: string
        accountId:
          type: string
        categoryId:
          type: string
        type:
          type: string
          enum: [expense, income]
        amount:
          type: number
        currency:
          type: string
        fx_rate_to_base:
          type: number
        amount_base:
          type: number
        note:
          nullable: true
        tags:
          type: array
          items:
            type: string
        occurredAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [txnId, accountId, categoryId, type, amount, currency, occurredAt]
    Budget:
      type: object
      properties:
        month:
          type: string
          pattern: "^\\d{4}-(0[1-9]|1[0-2])$"
        categoryId:
          nullable: true
        currency:
          type: string
        limit:
          type: number
        alertThreshold:
          type: number
        rollover:
          type: boolean
        periodStart:
          type: string
          format: date-time
        periodEnd:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [month, currency, limit]
paths:
  /accounts:
    get:
      summary: List accounts
      security:
        - CognitoUserPool: []
      responses:
        '200':
          description: A collection of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '401': { $ref: '#/components/schemas/Error' }
    post:
      summary: Create account
      security:
        - CognitoUserPool: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, type, currency]
              properties:
                name:
                  type: string
                type:
                  type: string
                  enum: [cash, bank, card, crypto]
                currency:
                  type: string
                openingBalance:
                  type: number
                archived:
                  type: boolean
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}:
    parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Fetch a single account
      security:
        - CognitoUserPool: []
      responses:
        '200':
          description: Account details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404': { description: Not found }
    put:
      summary: Update an account
      security:
        - CognitoUserPool: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                type: { type: string, enum: [cash, bank, card, crypto] }
                currency: { type: string }
                openingBalance: { type: number }
                archived: { type: boolean }
      responses:
        '200':
          description: Updated account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400': { description: Validation error }
        '404': { description: Not found }
    delete:
      summary: Delete an account
      security:
        - CognitoUserPool: []
      responses:
        '204': { description: Deleted }
        '409': { description: Account has related transactions }
  /categories:
    get:
      summary: List categories
      security:
        - CognitoUserPool: []
      responses:
        '200':
          description: Category list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create category
      security:
        - CognitoUserPool: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, type]
              properties:
                name: { type: string }
                type: { type: string, enum: [expense, income] }
                color: { type: string }
                icon: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
  /categories/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Fetch a category
      security:
        - CognitoUserPool: []
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404': { description: Not found }
    put:
      summary: Update category
      security:
        - CognitoUserPool: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                type: { type: string, enum: [expense, income] }
                color: { type: string }
                icon: { type: string }
      responses:
        '200':
          description: Updated category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      summary: Delete category
      security:
        - CognitoUserPool: []
      responses:
        '204': { description: Deleted }
        '409': { description: Category has related transactions }
  /transactions:
    get:
      summary: List transactions
      security:
        - CognitoUserPool: []
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Transaction list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
    post:
      summary: Create transaction
      security:
        - CognitoUserPool: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [accountId, categoryId, type, amount]
              properties:
                accountId: { type: string }
                categoryId: { type: string }
                type: { type: string, enum: [expense, income] }
                amount: { type: number }
                currency: { type: string }
                occurredAt: { type: string, format: date-time }
                fx_rate_to_base: { type: number }
                note: { type: string, nullable: true }
                tags:
                  type: array
                  items: { type: string }
      responses:
        '201':
          description: Created transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transactions/{txnId}:
    parameters:
      - in: path
        name: txnId
        required: true
        schema:
          type: string
    get:
      summary: Fetch a transaction
      security:
        - CognitoUserPool: []
      responses:
        '200':
          description: Transaction detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404': { description: Not found }
    put:
      summary: Update a transaction
      security:
        - CognitoUserPool: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountId: { type: string }
                categoryId: { type: string }
                type: { type: string, enum: [expense, income] }
                amount: { type: number }
                occurredAt: { type: string, format: date-time }
                fx_rate_to_base: { type: number }
                note: { type: string, nullable: true }
                tags:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Updated transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
    delete:
      summary: Delete transaction
      security:
        - CognitoUserPool: []
      responses:
        '204': { description: Deleted }
  /budgets:
    get:
      summary: List budgets
      security:
        - CognitoUserPool: []
      parameters:
        - in: query
          name: month
          schema:
            type: string
            pattern: "^\\d{4}-(0[1-9]|1[0-2])$"
      responses:
        '200':
          description: Budgets for the requested month (defaults to current month)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Budget'
    post:
      summary: Create or replace a budget
      security:
        - CognitoUserPool: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [month, currency, limit]
              properties:
                month:
                  type: string
                  pattern: "^\\d{4}-(0[1-9]|1[0-2])$"
                categoryId:
                  type: string
                  nullable: true
                  description: Use null to represent the overall budget (stored as "all")
                currency: { type: string }
                limit: { type: number }
                alertThreshold: { type: number }
                rollover: { type: boolean }
      responses:
        '201':
          description: Created budget
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
  /budgets/{month}:
    parameters:
      - in: path
        name: month
        required: true
        schema:
          type: string
          pattern: "^\\d{4}-(0[1-9]|1[0-2])$"
    get:
      summary: List budgets for a given month
      security:
        - CognitoUserPool: []
      responses:
        '200':
          description: Budgets for the month
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Budget'
  /budgets/{month}/{categoryId}:
    parameters:
      - in: path
        name: month
        required: true
        schema:
          type: string
          pattern: "^\\d{4}-(0[1-9]|1[0-2])$"
      - in: path
        name: categoryId
        required: true
        schema:
          type: string
          description: Use "all" for an overall budget with no category
    get:
      summary: Fetch a specific budget entry
      security:
        - CognitoUserPool: []
      responses:
        '200':
          description: Budget entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '404': { description: Not found }
    put:
      summary: Update a budget entry
      security:
        - CognitoUserPool: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currency: { type: string }
                limit: { type: number }
                alertThreshold: { type: number }
                rollover: { type: boolean }
      responses:
        '200':
          description: Updated budget
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
    delete:
      summary: Delete a budget entry
      security:
        - CognitoUserPool: []
      responses:
        '204': { description: Deleted }
  /attachments/presign:
    post:
      summary: Request a pre-signed upload URL for attachments
      security:
        - CognitoUserPool: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [txnId, filename, contentType]
              properties:
                txnId: { type: string }
                filename: { type: string }
                contentType:
                  type: string
                  enum: [image/jpeg, image/png, image/webp, application/pdf]
                contentLength: { type: integer }
      responses:
        '200':
          description: Pre-signed URL metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploadUrl: { type: string }
                  objectKey: { type: string }
                  expiresInSeconds: { type: integer }
                  bucket: { type: string }
        '400': { description: Validation error }
security:
  - CognitoUserPool: []
